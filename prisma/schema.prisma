generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  role             UserRole          @default(STAFF)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  createdAudits    Audit[]           @relation("AuditCreatedBy")
  auditAssignments AuditAssignment[]
  QualityControl   QualityControl[]
  Return           Return[]
  createdSales     Sale[]            @relation("SaleCreatedBy")
  sessions         Session[]
  storeStaff       StoreStaff?
  warehouseStaff   WarehouseStaff?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Warehouse {
  id                                           String              @id @default(cuid())
  name                                         String
  code                                         String              @unique
  address                                      String?
  contactPerson                                String?
  phone                                        String?
  email                                        String?
  isActive                                     Boolean             @default(true)
  createdAt                                    DateTime            @default(now())
  updatedAt                                    DateTime            @updatedAt
  audits                                       Audit[]
  inventoryItems                               InventoryItem[]
  purchaseOrders                               PurchaseOrder[]
  QualityControl                               QualityControl[]
  Transfer_Transfer_fromWarehouseIdToWarehouse Transfer[]          @relation("Transfer_fromWarehouseIdToWarehouse")
  Transfer_Transfer_toWarehouseIdToWarehouse   Transfer[]          @relation("Transfer_toWarehouseIdToWarehouse")
  staff                                        WarehouseStaff[]
  zones                                        WarehouseZone[]
  movements                                    WarehouseMovement[]
  stockStatuses                                StockStatus[]
}

model WarehouseZone {
  id          String           @id @default(cuid())
  name        String
  code        String
  warehouseId String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  aisles      WarehouseAisle[]
  warehouse   Warehouse        @relation(fields: [warehouseId], references: [id])

  @@unique([warehouseId, code])
}

model WarehouseAisle {
  id        String           @id @default(cuid())
  name      String
  code      String
  zoneId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  zone      WarehouseZone    @relation(fields: [zoneId], references: [id])
  shelves   WarehouseShelf[]

  @@unique([zoneId, code])
}

model WarehouseShelf {
  id        String         @id @default(cuid())
  name      String
  code      String
  aisleId   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  bins      WarehouseBin[]
  aisle     WarehouseAisle @relation(fields: [aisleId], references: [id])

  @@unique([aisleId, code])
}

model WarehouseBin {
  id             String          @id @default(cuid())
  name           String
  code           String
  shelfId        String
  capacity       Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  inventoryItems InventoryItem[]
  shelf          WarehouseShelf  @relation(fields: [shelfId], references: [id])

  @@unique([shelfId, code])
}

model WarehouseStaff {
  id          String    @id @default(cuid())
  userId      String    @unique
  warehouseId String
  position    String?
  isManager   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
}

model Store {
  id                                   String          @id @default(cuid())
  name                                 String
  code                                 String          @unique
  address                              String?
  phone                                String?
  email                                String?
  openingHours                         String?
  isActive                             Boolean         @default(true)
  createdAt                            DateTime        @default(now())
  updatedAt                            DateTime        @updatedAt
  inventoryItems                       InventoryItem[]
  Return                               Return[]
  sales                                Sale[]
  staff                                StoreStaff[]
  Transfer_Transfer_fromStoreIdToStore Transfer[]      @relation("Transfer_fromStoreIdToStore")
  Transfer_Transfer_toStoreIdToStore   Transfer[]      @relation("Transfer_toStoreIdToStore")
}

model StoreStaff {
  id        String   @id @default(cuid())
  userId    String   @unique
  storeId   String
  position  String?
  isManager Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store    @relation(fields: [storeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Supplier {
  id                        String                      @id @default(cuid())
  name                      String
  contactPerson             String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  postalCode                String?
  country                   String?
  taxId                     String?
  paymentTerms              String?
  notes                     String?
  rating                    Int?
  isActive                  Boolean                     @default(true)
  createdById               String?
  updatedById               String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  products                  Product[]
  purchaseOrders            PurchaseOrder[]
  contracts                 SupplierContract[]
  SupplierPerformanceMetric SupplierPerformanceMetric[]
}

model SupplierContract {
  id             String         @id @default(cuid())
  supplierId     String
  contractNumber String
  title          String
  description    String?
  startDate      DateTime
  endDate        DateTime?
  renewalDate    DateTime?
  value          Float?
  terms          String?
  paymentTerms   String?
  status         ContractStatus @default(ACTIVE)
  documentUrl    String?
  createdById    String?
  updatedById    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  supplier       Supplier       @relation(fields: [supplierId], references: [id])
}

model PurchaseOrder {
  id                   String              @id @default(cuid())
  orderNumber          String              @unique
  supplierId           String
  warehouseId          String
  orderDate            DateTime            @default(now())
  expectedDeliveryDate DateTime?
  status               PurchaseOrderStatus @default(DRAFT)
  subtotal             Float               @default(0)
  taxAmount            Float               @default(0)
  totalAmount          Float               @default(0)
  notes                String?
  createdById          String?
  approvedById         String?
  receivedById         String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  supplier             Supplier            @relation(fields: [supplierId], references: [id])
  warehouse            Warehouse           @relation(fields: [warehouseId], references: [id])
  items                PurchaseOrderItem[]
  QualityControl       QualityControl[]
}

model PurchaseOrderItem {
  id               String        @id @default(cuid())
  purchaseOrderId  String
  productId        String
  quantity         Int
  unitPrice        Float
  totalPrice       Float
  receivedQuantity Int           @default(0)
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  product          Product       @relation(fields: [productId], references: [id])
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model Product {
  id                 String               @id @default(cuid())
  sku                String               @unique
  barcode            String?
  name               String
  description        String?
  unit               String               @default("each")
  categoryId         String?
  supplierId         String?
  costPrice          Float                @default(0)
  wholesalePrice     Float                @default(0)
  retailPrice        Float                @default(0)
  minStockLevel      Int                  @default(0)
  reorderPoint       Int                  @default(0)
  leadTime           Int?
  condition          ProductCondition     @default(NEW)
  createdById        String?
  updatedById        String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  auditItems         AuditItem[]
  inventoryItems     InventoryItem[]
  category           Category?            @relation(fields: [categoryId], references: [id])
  supplier           Supplier?            @relation(fields: [supplierId], references: [id])
  purchaseOrderItems PurchaseOrderItem[]
  QualityControlItem QualityControlItem[]
  ReturnItem         ReturnItem[]
  saleItems          SaleItem[]
  transferItems      TransferItem[]
  movementItems      WarehouseMovementItem[]
  stockStatuses      StockStatus[]
}

model Category {
  id                String              @id @default(cuid())
  name              String
  description       String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  code              String?
  CategoryPriceRule CategoryPriceRule[]
  products          Product[]
}

model InventoryItem {
  id                String           @id @default(cuid())
  productId         String
  storeId           String?
  warehouseId       String?
  binId             String?
  batchNumber       String?
  lotNumber         String?
  serialNumber      String?
  expiryDate        DateTime?
  manufacturingDate DateTime?
  quantity          Int              @default(0)
  reservedQuantity  Int              @default(0)
  costPrice         Float            @default(0)
  retailPrice       Float            @default(0)
  status            InventoryStatus  @default(AVAILABLE)
  condition         ProductCondition @default(NEW)
  inventoryMethod   InventoryMethod?
  receivedDate      DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  auditItems        AuditItem[]
  movementItems     WarehouseMovementItem[]
  bin               WarehouseBin?    @relation(fields: [binId], references: [id])
  product           Product          @relation(fields: [productId], references: [id])
  store             Store?           @relation(fields: [storeId], references: [id])
  warehouse         Warehouse?       @relation(fields: [warehouseId], references: [id])
  saleItems         SaleItem[]

  @@unique([productId, storeId])
  @@unique([productId, warehouseId, binId])
}

model Sale {
  id             String        @id @default(cuid())
  receiptNumber  String        @unique
  storeId        String
  customerId     String?
  createdById    String
  saleDate       DateTime      @default(now())
  subtotal       Float
  taxAmount      Float
  discountAmount Float         @default(0)
  totalAmount    Float
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus @default(PAID)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Payment        Payment[]
  Return         Return[]
  createdBy      User          @relation("SaleCreatedBy", fields: [createdById], references: [id])
  customer       Customer?     @relation(fields: [customerId], references: [id])
  store          Store         @relation(fields: [storeId], references: [id])
  items          SaleItem[]
}

model SaleItem {
  id              String        @id @default(cuid())
  saleId          String
  productId       String
  inventoryItemId String
  quantity        Int
  unitPrice       Float
  discountAmount  Float         @default(0)
  taxAmount       Float         @default(0)
  totalPrice      Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  ReturnItem      ReturnItem[]
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])
  sale            Sale          @relation(fields: [saleId], references: [id])
}

model Transfer {
  id                                            String             @id @default(cuid())
  transferNumber                                String             @unique
  fromWarehouseId                               String?
  fromStoreId                                   String?
  toWarehouseId                                 String?
  toStoreId                                     String?
  status                                        TransferStatus     @default(DRAFT)
  transferType                                  TransferType
  priority                                      TransferPriority   @default(NORMAL)
  requestedById                                 String?
  approvedById                                  String?
  rejectedById                                  String?
  completedById                                 String?
  requestedDate                                 DateTime?
  approvedDate                                  DateTime?
  rejectedDate                                  DateTime?
  completedDate                                 DateTime?
  expectedDeliveryDate                          DateTime?
  actualDeliveryDate                            DateTime?
  shippingMethod                                String?
  trackingNumber                                String?
  totalItems                                    Int                @default(0)
  totalCost                                     Float              @default(0)
  totalRetail                                   Float              @default(0)
  rejectionReason                               String?
  notes                                         String?
  createdAt                                     DateTime           @default(now())
  updatedAt                                     DateTime           @updatedAt
  Store_Transfer_fromStoreIdToStore             Store?             @relation("Transfer_fromStoreIdToStore", fields: [fromStoreId], references: [id])
  Warehouse_Transfer_fromWarehouseIdToWarehouse Warehouse?         @relation("Transfer_fromWarehouseIdToWarehouse", fields: [fromWarehouseId], references: [id])
  Store_Transfer_toStoreIdToStore               Store?             @relation("Transfer_toStoreIdToStore", fields: [toStoreId], references: [id])
  Warehouse_Transfer_toWarehouseIdToWarehouse   Warehouse?         @relation("Transfer_toWarehouseIdToWarehouse", fields: [toWarehouseId], references: [id])
  TransferDocument                              TransferDocument[]
  items                                         TransferItem[]
}

model TransferItem {
  id                String           @id @default(cuid())
  transferId        String
  productId         String
  quantity          Int
  sourceCostPrice   Float
  sourceRetailPrice Float
  targetCostPrice   Float
  targetRetailPrice Float
  condition         ProductCondition @default(NEW)
  adjustmentReason  String?
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  product           Product          @relation(fields: [productId], references: [id])
  transfer          Transfer         @relation(fields: [transferId], references: [id])
}

model Customer {
  id                  String               @id @default(cuid())
  name                String
  email               String?              @unique
  phone               String?
  address             String?
  loyaltyPoints       Int                  @default(0)
  loyaltyTier         LoyaltyTier          @default(STANDARD)
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  Address             Address[]
  loyaltyTransactions LoyaltyTransaction[]
  Return              Return[]
  sales               Sale[]
}

model CustomerAddress {
  id           String   @id @default(cuid())
  customerId   String
  addressType  String   @default("SHIPPING")
  isDefault    Boolean  @default(false)
  addressLine1 String
  addressLine2 String?
  city         String
  state        String?
  postalCode   String
  country      String
  phone        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model LoyaltyProgram {
  id              String               @id @default(cuid())
  name            String
  description     String?
  pointsPerDollar Float                @default(1)
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  tiers           LoyaltyProgramTier[]
  transactions    LoyaltyTransaction[]
}

model LoyaltyProgramTier {
  id               String         @id @default(cuid())
  programId        String
  name             String
  description      String?
  requiredPoints   Int
  pointsMultiplier Float          @default(1)
  benefits         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  program          LoyaltyProgram @relation(fields: [programId], references: [id])
}

model LoyaltyTransaction {
  id          String                 @id @default(cuid())
  customerId  String
  programId   String
  points      Int
  type        LoyaltyTransactionType
  description String?
  referenceId String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  customer    Customer               @relation(fields: [customerId], references: [id])
  program     LoyaltyProgram         @relation(fields: [programId], references: [id])
}

model Audit {
  id              String            @id @default(cuid())
  referenceNumber String            @unique
  warehouseId     String
  status          AuditStatus       @default(PLANNED)
  startDate       DateTime
  endDate         DateTime?
  completedDate   DateTime?
  notes           String?
  createdById     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       User              @relation("AuditCreatedBy", fields: [createdById], references: [id])
  warehouse       Warehouse         @relation(fields: [warehouseId], references: [id])
  assignments     AuditAssignment[]
  items           AuditItem[]
}

model AuditItem {
  id               String          @id @default(cuid())
  auditId          String
  productId        String
  inventoryItemId  String
  expectedQuantity Int
  countedQuantity  Int?
  discrepancy      Int?
  notes            String?
  status           AuditItemStatus @default(PENDING)
  countedById      String?
  countedAt        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  audit            Audit           @relation(fields: [auditId], references: [id])
  inventoryItem    InventoryItem   @relation(fields: [inventoryItemId], references: [id])
  product          Product         @relation(fields: [productId], references: [id])
}

model AuditAssignment {
  id            String           @id @default(cuid())
  auditId       String
  userId        String
  assignedZones String?
  status        AssignmentStatus @default(PENDING)
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  audit         Audit            @relation(fields: [auditId], references: [id])
  user          User             @relation(fields: [userId], references: [id])
}

model Address {
  id         String   @id
  customerId String
  type       String   @default("SHIPPING")
  street     String
  city       String
  state      String?
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Customer   Customer @relation(fields: [customerId], references: [id])
}

model AuditLog {
  id         String      @id
  entityType String
  entityId   String
  action     AuditAction
  userId     String?
  userName   String?
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime    @default(now())
}

model CategoryPriceRule {
  id              String   @id
  categoryId      String
  adjustmentType  String
  adjustmentValue Float
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  Category        Category @relation(fields: [categoryId], references: [id])
}

model Payment {
  id              String        @id
  saleId          String
  amount          Float
  paymentMethod   PaymentMethod
  referenceNumber String?
  notes           String?
  processedById   String
  processedByName String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Sale            Sale          @relation(fields: [saleId], references: [id])
}

// Warehouse Movement Tracking Models
model WarehouseMovement {
  id              String            @id @default(cuid())
  referenceNumber String            @unique
  warehouseId     String
  movementType    MovementType
  status          MovementStatus    @default(PENDING)
  sourceType      String?           // PURCHASE_ORDER, TRANSFER, RETURN, ADJUSTMENT
  sourceId        String?           // ID of the source document
  totalItems      Int               @default(0)
  totalValue      Float             @default(0)
  notes           String?
  processedById   String?
  processedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  warehouse       Warehouse         @relation(fields: [warehouseId], references: [id])
  items           WarehouseMovementItem[]
}

model WarehouseMovementItem {
  id                    String            @id @default(cuid())
  movementId            String
  productId             String
  inventoryItemId       String?
  quantity              Int
  unitCost              Float             @default(0)
  totalCost             Float             @default(0)
  condition             ProductCondition  @default(NEW)
  batchNumber           String?
  expiryDate            DateTime?
  notes                 String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  movement              WarehouseMovement @relation(fields: [movementId], references: [id])
  product               Product           @relation(fields: [productId], references: [id])
  inventoryItem         InventoryItem?    @relation(fields: [inventoryItemId], references: [id])
}

model StockStatus {
  id              String        @id @default(cuid())
  warehouseId     String
  productId       String
  currentStock    Int           @default(0)
  reservedStock   Int           @default(0)
  availableStock  Int           @default(0)
  outOfStock      Boolean       @default(false)
  lastMovementAt  DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  warehouse       Warehouse     @relation(fields: [warehouseId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])

  @@unique([warehouseId, productId])
}

model QualityControl {
  id                 String               @id
  referenceNumber    String               @unique
  type               QCType
  status             QCStatus             @default(PENDING)
  warehouseId        String
  purchaseOrderId    String?
  returnId           String?
  inspectionDate     DateTime             @default(now())
  completedDate      DateTime?
  inspectedById      String
  notes              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  User               User                 @relation(fields: [inspectedById], references: [id])
  PurchaseOrder      PurchaseOrder?       @relation(fields: [purchaseOrderId], references: [id])
  Return             Return?              @relation(fields: [returnId], references: [id])
  Warehouse          Warehouse            @relation(fields: [warehouseId], references: [id])
  QualityControlItem QualityControlItem[]
}

model QualityControlItem {
  id               String         @id
  qualityControlId String
  productId        String
  quantity         Int
  passedQuantity   Int            @default(0)
  failedQuantity   Int            @default(0)
  pendingQuantity  Int            @default(0)
  status           QCItemStatus   @default(PENDING)
  reason           String?
  action           QCAction?
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  Product          Product        @relation(fields: [productId], references: [id])
  QualityControl   QualityControl @relation(fields: [qualityControlId], references: [id])
}

model Return {
  id             String           @id
  returnNumber   String           @unique
  saleId         String?
  storeId        String
  customerId     String?
  returnDate     DateTime         @default(now())
  status         ReturnStatus     @default(PENDING)
  subtotal       Float
  taxAmount      Float
  totalAmount    Float
  refundMethod   RefundMethod?
  refundStatus   RefundStatus     @default(PENDING)
  reason         String?
  notes          String?
  processedById  String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  QualityControl QualityControl[]
  Customer       Customer?        @relation(fields: [customerId], references: [id])
  User           User             @relation(fields: [processedById], references: [id])
  Sale           Sale?            @relation(fields: [saleId], references: [id])
  Store          Store            @relation(fields: [storeId], references: [id])
  ReturnItem     ReturnItem[]
}

model ReturnItem {
  id         String        @id
  returnId   String
  productId  String
  saleItemId String?
  quantity   Int
  unitPrice  Float
  totalPrice Float
  reason     ReturnReason
  condition  ItemCondition @default(GOOD)
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime
  Product    Product       @relation(fields: [productId], references: [id])
  Return     Return        @relation(fields: [returnId], references: [id])
  SaleItem   SaleItem?     @relation(fields: [saleItemId], references: [id])
}

model SupplierPerformanceMetric {
  id          String                @id
  supplierId  String
  metricType  PerformanceMetricType
  date        DateTime
  value       Float
  notes       String?
  createdById String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime
  Supplier    Supplier              @relation(fields: [supplierId], references: [id])
}

model TaxRate {
  id        String   @id
  name      String
  rate      Float
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model TransferDocument {
  id          String   @id
  transferId  String
  name        String
  type        String
  url         String
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Transfer    Transfer @relation(fields: [transferId], references: [id])
}

model category {
  id          Int       @id @default(autoincrement())
  name        String    @unique(map: "category_name_unique") @db.VarChar(255)
  description String?
  image       String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
}

model product {
  id          Int       @id @default(autoincrement())
  name        String    @unique(map: "product_name_unique") @db.VarChar(255)
  description String?
  price       Decimal   @db.Decimal(10, 2)
  category    String    @db.VarChar(255)
  subcategory String?   @db.VarChar(255)
  image       String?   @db.VarChar(255)
  stock       Int       @default(0)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  WAREHOUSE_MANAGER
  WAREHOUSE_STAFF
  STORE_MANAGER
  STORE_STAFF
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWAL_PENDING
}

enum PerformanceMetricType {
  ON_TIME_DELIVERY
  QUALITY
  PRICE_COMPETITIVENESS
  RESPONSIVENESS
  LEAD_TIME
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  SENT
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum InventoryStatus {
  AVAILABLE
  RESERVED
  DAMAGED
  EXPIRED
  IN_TRANSIT
  QUARANTINE
  RETURNED
}

enum InventoryMethod {
  FIFO
  LIFO
  FEFO
  AVERAGE_COST
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  FAILED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum RefundMethod {
  ORIGINAL_PAYMENT
  STORE_CREDIT
  CASH
  BANK_TRANSFER
}

enum RefundStatus {
  PENDING
  PROCESSED
  REJECTED
}

enum ReturnReason {
  DEFECTIVE
  DAMAGED
  WRONG_ITEM
  NOT_AS_DESCRIBED
  CHANGED_MIND
  OTHER
}

enum ItemCondition {
  GOOD
  DAMAGED
  OPENED
  USED
}

enum QCType {
  RECEIVING
  RETURN
  RANDOM
  COMPLAINT
}

enum QCStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QCItemStatus {
  PENDING
  PASSED
  FAILED
  PARTIALLY_PASSED
}

enum QCAction {
  ACCEPT
  REJECT
  REWORK
  RETURN_TO_SUPPLIER
  DISPOSE
}

enum TransferType {
  RESTOCK
  RETURN
  RELOCATION
  ADJUSTMENT
  INITIAL_STOCK
}

enum TransferPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MovementType {
  INWARD
  OUTWARD
}

enum MovementStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TransferStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum LoyaltyTransactionType {
  EARN
  REDEEM
  ADJUSTMENT
  EXPIRY
}

enum LoyaltyTier {
  STANDARD
  SILVER
  GOLD
  PLATINUM
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  TRANSFER
  ADJUSTMENT
  SALE
  RETURN
  APPROVAL
  REJECTION
}

enum AuditStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AuditItemStatus {
  PENDING
  COUNTED
  RECONCILED
  DISCREPANCY
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProductCondition {
  NEW
  DAMAGED
}
