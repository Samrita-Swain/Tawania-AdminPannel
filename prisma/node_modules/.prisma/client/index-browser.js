
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  image: 'image',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.WarehouseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  address: 'address',
  contactPerson: 'contactPerson',
  phone: 'phone',
  email: 'email',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WarehouseZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  warehouseId: 'warehouseId',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WarehouseAisleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  zoneId: 'zoneId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WarehouseShelfScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  aisleId: 'aisleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WarehouseBinScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  shelfId: 'shelfId',
  capacity: 'capacity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WarehouseStaffScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  warehouseId: 'warehouseId',
  position: 'position',
  isManager: 'isManager',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  address: 'address',
  phone: 'phone',
  email: 'email',
  openingHours: 'openingHours',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StoreStaffScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  position: 'position',
  isManager: 'isManager',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactPerson: 'contactPerson',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  taxId: 'taxId',
  paymentTerms: 'paymentTerms',
  notes: 'notes',
  isActive: 'isActive',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierContractScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  startDate: 'startDate',
  endDate: 'endDate',
  terms: 'terms',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  supplierId: 'supplierId',
  warehouseId: 'warehouseId',
  status: 'status',
  orderDate: 'orderDate',
  expectedDeliveryDate: 'expectedDeliveryDate',
  deliveredDate: 'deliveredDate',
  subtotal: 'subtotal',
  tax: 'tax',
  shipping: 'shipping',
  discount: 'discount',
  total: 'total',
  notes: 'notes',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseOrderItemScalarFieldEnum = {
  id: 'id',
  purchaseOrderId: 'purchaseOrderId',
  productId: 'productId',
  description: 'description',
  orderedQuantity: 'orderedQuantity',
  receivedQuantity: 'receivedQuantity',
  unitPrice: 'unitPrice',
  discount: 'discount',
  tax: 'tax',
  subtotal: 'subtotal',
  total: 'total',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  barcode: 'barcode',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId',
  supplierId: 'supplierId',
  costPrice: 'costPrice',
  wholesalePrice: 'wholesalePrice',
  retailPrice: 'retailPrice',
  unit: 'unit',
  minStockLevel: 'minStockLevel',
  maxStockLevel: 'maxStockLevel',
  reorderPoint: 'reorderPoint',
  weight: 'weight',
  dimensions: 'dimensions',
  taxRate: 'taxRate',
  isActive: 'isActive',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryItemScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  warehouseId: 'warehouseId',
  storeId: 'storeId',
  binId: 'binId',
  batchNumber: 'batchNumber',
  lotNumber: 'lotNumber',
  serialNumber: 'serialNumber',
  expiryDate: 'expiryDate',
  quantity: 'quantity',
  reservedQuantity: 'reservedQuantity',
  costPrice: 'costPrice',
  wholesalePrice: 'wholesalePrice',
  retailPrice: 'retailPrice',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  receiptNumber: 'receiptNumber',
  storeId: 'storeId',
  customerId: 'customerId',
  createdById: 'createdById',
  saleDate: 'saleDate',
  subtotal: 'subtotal',
  taxAmount: 'taxAmount',
  discountAmount: 'discountAmount',
  totalAmount: 'totalAmount',
  loyaltyPointsEarned: 'loyaltyPointsEarned',
  loyaltyPointsRedeemed: 'loyaltyPointsRedeemed',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleItemScalarFieldEnum = {
  id: 'id',
  saleId: 'saleId',
  productId: 'productId',
  inventoryItemId: 'inventoryItemId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  discountAmount: 'discountAmount',
  taxAmount: 'taxAmount',
  totalPrice: 'totalPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransferScalarFieldEnum = {
  id: 'id',
  referenceNumber: 'referenceNumber',
  type: 'type',
  sourceWarehouseId: 'sourceWarehouseId',
  destinationWarehouseId: 'destinationWarehouseId',
  sourceStoreId: 'sourceStoreId',
  destinationStoreId: 'destinationStoreId',
  status: 'status',
  requestedDate: 'requestedDate',
  approvedDate: 'approvedDate',
  shippedDate: 'shippedDate',
  receivedDate: 'receivedDate',
  notes: 'notes',
  createdById: 'createdById',
  approvedById: 'approvedById',
  receivedById: 'receivedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransferItemScalarFieldEnum = {
  id: 'id',
  transferId: 'transferId',
  productId: 'productId',
  sourceInventoryId: 'sourceInventoryId',
  destinationInventoryId: 'destinationInventoryId',
  requestedQuantity: 'requestedQuantity',
  approvedQuantity: 'approvedQuantity',
  shippedQuantity: 'shippedQuantity',
  receivedQuantity: 'receivedQuantity',
  sourceCostPrice: 'sourceCostPrice',
  sourceWholesalePrice: 'sourceWholesalePrice',
  sourceRetailPrice: 'sourceRetailPrice',
  destinationCostPrice: 'destinationCostPrice',
  destinationWholesalePrice: 'destinationWholesalePrice',
  destinationRetailPrice: 'destinationRetailPrice',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  birthDate: 'birthDate',
  gender: 'gender',
  loyaltyPoints: 'loyaltyPoints',
  loyaltyTier: 'loyaltyTier',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerAddressScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  addressType: 'addressType',
  isDefault: 'isDefault',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoyaltyProgramScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  pointsPerCurrency: 'pointsPerCurrency',
  minimumPurchase: 'minimumPurchase',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoyaltyProgramTierScalarFieldEnum = {
  id: 'id',
  programId: 'programId',
  name: 'name',
  description: 'description',
  requiredPoints: 'requiredPoints',
  pointsMultiplier: 'pointsMultiplier',
  benefits: 'benefits',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoyaltyTransactionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  programId: 'programId',
  points: 'points',
  type: 'type',
  description: 'description',
  referenceId: 'referenceId',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt'
};

exports.Prisma.AuditScalarFieldEnum = {
  id: 'id',
  referenceNumber: 'referenceNumber',
  warehouseId: 'warehouseId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  notes: 'notes',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditItemScalarFieldEnum = {
  id: 'id',
  auditId: 'auditId',
  productId: 'productId',
  inventoryItemId: 'inventoryItemId',
  expectedQuantity: 'expectedQuantity',
  actualQuantity: 'actualQuantity',
  variance: 'variance',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditAssignmentScalarFieldEnum = {
  id: 'id',
  auditId: 'auditId',
  userId: 'userId',
  assignedZones: 'assignedZones',
  assignedAisles: 'assignedAisles',
  assignedShelves: 'assignedShelves',
  assignedBins: 'assignedBins',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerNoteScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  note: 'note',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerPromotionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  discountValue: 'discountValue',
  isPercentage: 'isPercentage',
  code: 'code',
  minimumPurchase: 'minimumPurchase',
  programId: 'programId',
  requiredLoyaltyTier: 'requiredLoyaltyTier',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  usageLimit: 'usageLimit',
  usageCount: 'usageCount',
  applicableProducts: 'applicableProducts',
  applicableCategories: 'applicableCategories',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerToGroupScalarFieldEnum = {
  customerId: 'customerId',
  groupId: 'groupId',
  createdAt: 'createdAt'
};

exports.Prisma.LoyaltyProgramRuleScalarFieldEnum = {
  id: 'id',
  programId: 'programId',
  name: 'name',
  description: 'description',
  type: 'type',
  conditions: 'conditions',
  pointsAwarded: 'pointsAwarded',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  relatedEntityId: 'relatedEntityId',
  relatedEntityType: 'relatedEntityType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  senderId: 'senderId'
};

exports.Prisma.PromotionRedemptionScalarFieldEnum = {
  id: 'id',
  promotionId: 'promotionId',
  customerId: 'customerId',
  saleId: 'saleId',
  discountAmount: 'discountAmount',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF',
  WAREHOUSE_MANAGER: 'WAREHOUSE_MANAGER',
  WAREHOUSE_STAFF: 'WAREHOUSE_STAFF',
  STORE_MANAGER: 'STORE_MANAGER',
  STORE_STAFF: 'STORE_STAFF'
};

exports.InventoryStatus = exports.$Enums.InventoryStatus = {
  AVAILABLE: 'AVAILABLE',
  RESERVED: 'RESERVED',
  DAMAGED: 'DAMAGED',
  EXPIRED: 'EXPIRED',
  IN_TRANSIT: 'IN_TRANSIT',
  QUARANTINE: 'QUARANTINE',
  RETURNED: 'RETURNED',
  OUT_OF_STOCK: 'OUT_OF_STOCK'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  MOBILE_PAYMENT: 'MOBILE_PAYMENT',
  LOYALTY_POINTS: 'LOYALTY_POINTS',
  GIFT_CARD: 'GIFT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  REFUNDED: 'REFUNDED',
  FAILED: 'FAILED'
};

exports.TransferType = exports.$Enums.TransferType = {
  WAREHOUSE_TO_WAREHOUSE: 'WAREHOUSE_TO_WAREHOUSE',
  WAREHOUSE_TO_STORE: 'WAREHOUSE_TO_STORE',
  STORE_TO_WAREHOUSE: 'STORE_TO_WAREHOUSE',
  STORE_TO_STORE: 'STORE_TO_STORE'
};

exports.TransferStatus = exports.$Enums.TransferStatus = {
  DRAFT: 'DRAFT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  IN_TRANSIT: 'IN_TRANSIT',
  PARTIALLY_RECEIVED: 'PARTIALLY_RECEIVED',
  RECEIVED: 'RECEIVED',
  CANCELLED: 'CANCELLED'
};

exports.LoyaltyTier = exports.$Enums.LoyaltyTier = {
  STANDARD: 'STANDARD',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM'
};

exports.LoyaltyTransactionType = exports.$Enums.LoyaltyTransactionType = {
  EARN: 'EARN',
  REDEEM: 'REDEEM',
  ADJUSTMENT: 'ADJUSTMENT',
  EXPIRY: 'EXPIRY'
};

exports.AuditStatus = exports.$Enums.AuditStatus = {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.AuditItemStatus = exports.$Enums.AuditItemStatus = {
  PENDING: 'PENDING',
  COUNTED: 'COUNTED',
  RECONCILED: 'RECONCILED',
  DISCREPANCY: 'DISCREPANCY'
};

exports.PromotionType = exports.$Enums.PromotionType = {
  DISCOUNT_AMOUNT: 'DISCOUNT_AMOUNT',
  DISCOUNT_PERCENTAGE: 'DISCOUNT_PERCENTAGE',
  FREE_SHIPPING: 'FREE_SHIPPING',
  BUY_X_GET_Y: 'BUY_X_GET_Y',
  BUNDLE_DISCOUNT: 'BUNDLE_DISCOUNT',
  LOYALTY_POINTS_MULTIPLIER: 'LOYALTY_POINTS_MULTIPLIER'
};

exports.LoyaltyRuleType = exports.$Enums.LoyaltyRuleType = {
  PURCHASE: 'PURCHASE',
  FIRST_PURCHASE: 'FIRST_PURCHASE',
  BIRTHDAY: 'BIRTHDAY',
  REFERRAL: 'REFERRAL',
  PRODUCT_CATEGORY: 'PRODUCT_CATEGORY',
  SPECIFIC_PRODUCT: 'SPECIFIC_PRODUCT',
  PURCHASE_FREQUENCY: 'PURCHASE_FREQUENCY',
  CUSTOM: 'CUSTOM'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TRANSFER_REQUEST: 'TRANSFER_REQUEST',
  TRANSFER_APPROVAL: 'TRANSFER_APPROVAL',
  TRANSFER_REJECTION: 'TRANSFER_REJECTION',
  TRANSFER_RECEIVED: 'TRANSFER_RECEIVED',
  LOW_STOCK: 'LOW_STOCK',
  STOCK_EXPIRING: 'STOCK_EXPIRING',
  AUDIT_ASSIGNED: 'AUDIT_ASSIGNED',
  AUDIT_COMPLETED: 'AUDIT_COMPLETED',
  PURCHASE_ORDER: 'PURCHASE_ORDER',
  SYSTEM: 'SYSTEM',
  LOYALTY_POINTS_EARNED: 'LOYALTY_POINTS_EARNED',
  LOYALTY_POINTS_REDEEMED: 'LOYALTY_POINTS_REDEEMED',
  LOYALTY_TIER_CHANGED: 'LOYALTY_TIER_CHANGED',
  PROMOTION_AVAILABLE: 'PROMOTION_AVAILABLE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Warehouse: 'Warehouse',
  WarehouseZone: 'WarehouseZone',
  WarehouseAisle: 'WarehouseAisle',
  WarehouseShelf: 'WarehouseShelf',
  WarehouseBin: 'WarehouseBin',
  WarehouseStaff: 'WarehouseStaff',
  Store: 'Store',
  StoreStaff: 'StoreStaff',
  Supplier: 'Supplier',
  SupplierContract: 'SupplierContract',
  PurchaseOrder: 'PurchaseOrder',
  PurchaseOrderItem: 'PurchaseOrderItem',
  Product: 'Product',
  Category: 'Category',
  InventoryItem: 'InventoryItem',
  Sale: 'Sale',
  SaleItem: 'SaleItem',
  Transfer: 'Transfer',
  TransferItem: 'TransferItem',
  Customer: 'Customer',
  CustomerAddress: 'CustomerAddress',
  LoyaltyProgram: 'LoyaltyProgram',
  LoyaltyProgramTier: 'LoyaltyProgramTier',
  LoyaltyTransaction: 'LoyaltyTransaction',
  Audit: 'Audit',
  AuditItem: 'AuditItem',
  AuditAssignment: 'AuditAssignment',
  CustomerGroup: 'CustomerGroup',
  CustomerNote: 'CustomerNote',
  CustomerPromotion: 'CustomerPromotion',
  CustomerToGroup: 'CustomerToGroup',
  LoyaltyProgramRule: 'LoyaltyProgramRule',
  Notification: 'Notification',
  PromotionRedemption: 'PromotionRedemption'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
