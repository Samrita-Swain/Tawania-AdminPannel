generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                                            String            @id @default(cuid())
  name                                          String?
  email                                         String            @unique
  emailVerified                                 DateTime?
  password                                      String?
  image                                         String?
  role                                          UserRole          @default(STAFF)
  createdAt                                     DateTime          @default(now())
  updatedAt                                     DateTime          @updatedAt
  accounts                                      Account[]
  createdAudits                                 Audit[]           @relation("AuditCreatedBy")
  auditAssignments                              AuditAssignment[]
  CustomerNote                                  CustomerNote[]
  sentNotifications                             Notification[]    @relation("UserSentNotifications")
  receivedNotifications                         Notification[]    @relation("UserReceivedNotifications")
  Product_Product_createdByIdToUser             Product[]         @relation("Product_createdByIdToUser")
  Product_Product_updatedByIdToUser             Product[]         @relation("Product_updatedByIdToUser")
  PurchaseOrder_PurchaseOrder_createdByIdToUser PurchaseOrder[]   @relation("PurchaseOrder_createdByIdToUser")
  PurchaseOrder_PurchaseOrder_updatedByIdToUser PurchaseOrder[]   @relation("PurchaseOrder_updatedByIdToUser")
  createdSales                                  Sale[]            @relation("SaleCreatedBy")
  sessions                                      Session[]
  storeStaff                                    StoreStaff?
  Supplier_Supplier_createdByIdToUser           Supplier[]        @relation("Supplier_createdByIdToUser")
  Supplier_Supplier_updatedByIdToUser           Supplier[]        @relation("Supplier_updatedByIdToUser")
  Transfer_Transfer_approvedByIdToUser          Transfer[]        @relation("Transfer_approvedByIdToUser")
  Transfer_Transfer_createdByIdToUser           Transfer[]        @relation("Transfer_createdByIdToUser")
  Transfer_Transfer_receivedByIdToUser          Transfer[]        @relation("Transfer_receivedByIdToUser")
  warehouseStaff                                WarehouseStaff?
  // notifications                                 Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Warehouse {
  id                                                  String           @id @default(cuid())
  name                                                String
  code                                                String           @unique
  address                                             String?
  contactPerson                                       String?
  phone                                               String?
  email                                               String?
  isActive                                            Boolean          @default(true)
  createdAt                                           DateTime         @default(now())
  updatedAt                                           DateTime         @updatedAt
  audits                                              Audit[]
  inventoryItems                                      InventoryItem[]
  purchaseOrders                                      PurchaseOrder[]
  Transfer_Transfer_destinationWarehouseIdToWarehouse Transfer[]       @relation("Transfer_destinationWarehouseIdToWarehouse")
  Transfer_Transfer_sourceWarehouseIdToWarehouse      Transfer[]       @relation("Transfer_sourceWarehouseIdToWarehouse")
  staff                                               WarehouseStaff[]
  zones                                               WarehouseZone[]
}

model WarehouseZone {
  id          String           @id @default(cuid())
  name        String
  code        String
  warehouseId String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  aisles      WarehouseAisle[]
  warehouse   Warehouse        @relation(fields: [warehouseId], references: [id])

  @@unique([warehouseId, code])
}

model WarehouseAisle {
  id        String           @id @default(cuid())
  name      String
  code      String
  zoneId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  zone      WarehouseZone    @relation(fields: [zoneId], references: [id])
  shelves   WarehouseShelf[]

  @@unique([zoneId, code])
}

model WarehouseShelf {
  id        String         @id @default(cuid())
  name      String
  code      String
  aisleId   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  bins      WarehouseBin[]
  aisle     WarehouseAisle @relation(fields: [aisleId], references: [id])

  @@unique([aisleId, code])
}

model WarehouseBin {
  id             String          @id @default(cuid())
  name           String
  code           String
  shelfId        String
  capacity       Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  inventoryItems InventoryItem[]
  shelf          WarehouseShelf  @relation(fields: [shelfId], references: [id])

  @@unique([shelfId, code])
}

model WarehouseStaff {
  id          String    @id @default(cuid())
  userId      String    @unique
  warehouseId String
  position    String?
  isManager   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
}

model Store {
  id                                          String          @id @default(cuid())
  name                                        String
  code                                        String          @unique
  address                                     String?
  phone                                       String?
  email                                       String?
  openingHours                                String?
  isActive                                    Boolean         @default(true)
  createdAt                                   DateTime        @default(now())
  updatedAt                                   DateTime        @updatedAt
  inventoryItems                              InventoryItem[]
  sales                                       Sale[]
  staff                                       StoreStaff[]
  Transfer_Transfer_destinationStoreIdToStore Transfer[]      @relation("Transfer_destinationStoreIdToStore")
  Transfer_Transfer_sourceStoreIdToStore      Transfer[]      @relation("Transfer_sourceStoreIdToStore")
}

model StoreStaff {
  id        String   @id @default(cuid())
  userId    String   @unique
  storeId   String
  position  String?
  isManager Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store    @relation(fields: [storeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Supplier {
  id                              String             @id @default(cuid())
  name                            String
  contactPerson                   String?
  email                           String?
  phone                           String?
  address                         String?
  city                            String?
  state                           String?
  postalCode                      String?
  country                         String?
  taxId                           String?
  paymentTerms                    String?
  notes                           String?
  isActive                        Boolean            @default(true)
  createdById                     String
  updatedById                     String
  createdAt                       DateTime           @default(now())
  updatedAt                       DateTime           @updatedAt
  products                        Product[]
  purchaseOrders                  PurchaseOrder[]
  User_Supplier_createdByIdToUser User               @relation("Supplier_createdByIdToUser", fields: [createdById], references: [id])
  User_Supplier_updatedByIdToUser User               @relation("Supplier_updatedByIdToUser", fields: [updatedById], references: [id])
  contracts                       SupplierContract[]
}

model SupplierContract {
  id          String    @id @default(cuid())
  supplierId  String
  startDate   DateTime
  endDate     DateTime?
  terms       String?
  attachments String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
}

model PurchaseOrder {
  id                                   String              @id @default(cuid())
  orderNumber                          String              @unique
  supplierId                           String
  warehouseId                          String
  status                               String              @default("DRAFT")
  orderDate                            DateTime            @default(now())
  expectedDeliveryDate                 DateTime?
  deliveredDate                        DateTime?
  subtotal                             Decimal             @default(0) @db.Decimal(10, 2)
  tax                                  Decimal             @default(0) @db.Decimal(10, 2)
  shipping                             Decimal             @default(0) @db.Decimal(10, 2)
  discount                             Decimal             @default(0) @db.Decimal(10, 2)
  total                                Decimal             @default(0) @db.Decimal(10, 2)
  notes                                String?
  createdById                          String?
  updatedById                          String?
  createdAt                            DateTime            @default(now())
  updatedAt                            DateTime            @updatedAt
  User_PurchaseOrder_createdByIdToUser User?               @relation("PurchaseOrder_createdByIdToUser", fields: [createdById], references: [id])
  supplier                             Supplier            @relation(fields: [supplierId], references: [id])
  User_PurchaseOrder_updatedByIdToUser User?               @relation("PurchaseOrder_updatedByIdToUser", fields: [updatedById], references: [id])
  warehouse                            Warehouse           @relation(fields: [warehouseId], references: [id])
  items                                PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id               String        @id @default(cuid())
  purchaseOrderId  String
  productId        String
  description      String?
  orderedQuantity  Int
  receivedQuantity Int           @default(0)
  unitPrice        Decimal       @db.Decimal(10, 2)
  discount         Decimal       @default(0) @db.Decimal(10, 2)
  tax              Decimal       @default(0) @db.Decimal(10, 2)
  subtotal         Decimal       @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  product          Product       @relation(fields: [productId], references: [id])
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model Product {
  id                             String              @id @default(cuid())
  sku                            String              @unique
  barcode                        String?
  name                           String
  description                    String?
  categoryId                     String?
  supplierId                     String?
  costPrice                      Decimal             @default(0) @db.Decimal(10, 2)
  wholesalePrice                 Decimal             @default(0) @db.Decimal(10, 2)
  retailPrice                    Decimal             @default(0) @db.Decimal(10, 2)
  unit                           String              @default("each")
  minStockLevel                  Int                 @default(0)
  maxStockLevel                  Int?
  reorderPoint                   Int                 @default(0)
  weight                         Decimal?            @db.Decimal(10, 2)
  dimensions                     String?
  taxRate                        Decimal?            @default(0) @db.Decimal(5, 2)
  isActive                       Boolean             @default(true)
  createdById                    String
  updatedById                    String
  createdAt                      DateTime            @default(now())
  updatedAt                      DateTime            @updatedAt
  auditItems                     AuditItem[]
  inventoryItems                 InventoryItem[]
  category                       Category?           @relation(fields: [categoryId], references: [id])
  User_Product_createdByIdToUser User                @relation("Product_createdByIdToUser", fields: [createdById], references: [id])
  supplier                       Supplier?           @relation(fields: [supplierId], references: [id])
  User_Product_updatedByIdToUser User                @relation("Product_updatedByIdToUser", fields: [updatedById], references: [id])
  purchaseOrderItems             PurchaseOrderItem[]
  saleItems                      SaleItem[]
  transferItems                  TransferItem[]
}

model Category {
  id             String     @id @default(cuid())
  name           String
  description    String?
  parentId       String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Category       Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  other_Category Category[] @relation("CategoryToCategory")
  products       Product[]
}

model InventoryItem {
  id                                                              String          @id @default(cuid())
  productId                                                       String
  warehouseId                                                     String?
  storeId                                                         String?
  binId                                                           String?
  batchNumber                                                     String?
  lotNumber                                                       String?
  serialNumber                                                    String?
  expiryDate                                                      DateTime?
  quantity                                                        Int             @default(0)
  reservedQuantity                                                Int             @default(0)
  costPrice                                                       Decimal         @default(0) @db.Decimal(10, 2)
  wholesalePrice                                                  Decimal         @default(0) @db.Decimal(10, 2)
  retailPrice                                                     Decimal         @default(0) @db.Decimal(10, 2)
  status                                                          InventoryStatus @default(AVAILABLE)
  createdAt                                                       DateTime        @default(now())
  updatedAt                                                       DateTime        @updatedAt
  auditItems                                                      AuditItem[]
  bin                                                             WarehouseBin?   @relation(fields: [binId], references: [id])
  product                                                         Product         @relation(fields: [productId], references: [id])
  store                                                           Store?          @relation(fields: [storeId], references: [id])
  warehouse                                                       Warehouse?      @relation(fields: [warehouseId], references: [id])
  saleItems                                                       SaleItem[]
  TransferItem_TransferItem_destinationInventoryIdToInventoryItem TransferItem[]  @relation("TransferItem_destinationInventoryIdToInventoryItem")
  TransferItem_TransferItem_sourceInventoryIdToInventoryItem      TransferItem[]  @relation("TransferItem_sourceInventoryIdToInventoryItem")

  @@unique([productId, warehouseId, storeId, batchNumber, lotNumber])
}

model Sale {
  id                    String                @id @default(cuid())
  receiptNumber         String                @unique
  storeId               String
  customerId            String?
  createdById           String
  saleDate              DateTime              @default(now())
  subtotal              Decimal               @db.Decimal(10, 2)
  taxAmount             Decimal               @db.Decimal(10, 2)
  discountAmount        Decimal               @db.Decimal(10, 2)
  totalAmount           Decimal               @db.Decimal(10, 2)
  loyaltyPointsEarned   Int                   @default(0)
  loyaltyPointsRedeemed Int                   @default(0)
  paymentMethod         PaymentMethod
  paymentStatus         PaymentStatus         @default(PAID)
  notes                 String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  LoyaltyTransaction    LoyaltyTransaction[]
  PromotionRedemption   PromotionRedemption[]
  createdBy             User                  @relation("SaleCreatedBy", fields: [createdById], references: [id])
  customer              Customer?             @relation(fields: [customerId], references: [id])
  store                 Store                 @relation(fields: [storeId], references: [id])
  items                 SaleItem[]
}

model SaleItem {
  id              String        @id @default(cuid())
  saleId          String
  productId       String
  inventoryItemId String
  quantity        Int
  unitPrice       Decimal       @db.Decimal(10, 2)
  discountAmount  Decimal       @default(0) @db.Decimal(10, 2)
  taxAmount       Decimal       @default(0) @db.Decimal(10, 2)
  totalPrice      Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])
  sale            Sale          @relation(fields: [saleId], references: [id])
}

model Transfer {
  id                                                   String         @id @default(cuid())
  referenceNumber                                      String         @unique
  type                                                 TransferType
  sourceWarehouseId                                    String?
  destinationWarehouseId                               String?
  sourceStoreId                                        String?
  destinationStoreId                                   String?
  status                                               TransferStatus @default(DRAFT)
  requestedDate                                        DateTime       @default(now())
  approvedDate                                         DateTime?
  shippedDate                                          DateTime?
  receivedDate                                         DateTime?
  notes                                                String?
  createdById                                          String
  approvedById                                         String?
  receivedById                                         String?
  createdAt                                            DateTime       @default(now())
  updatedAt                                            DateTime       @updatedAt
  User_Transfer_approvedByIdToUser                     User?          @relation("Transfer_approvedByIdToUser", fields: [approvedById], references: [id])
  User_Transfer_createdByIdToUser                      User           @relation("Transfer_createdByIdToUser", fields: [createdById], references: [id])
  Store_Transfer_destinationStoreIdToStore             Store?         @relation("Transfer_destinationStoreIdToStore", fields: [destinationStoreId], references: [id])
  Warehouse_Transfer_destinationWarehouseIdToWarehouse Warehouse?     @relation("Transfer_destinationWarehouseIdToWarehouse", fields: [destinationWarehouseId], references: [id])
  User_Transfer_receivedByIdToUser                     User?          @relation("Transfer_receivedByIdToUser", fields: [receivedById], references: [id])
  Store_Transfer_sourceStoreIdToStore                  Store?         @relation("Transfer_sourceStoreIdToStore", fields: [sourceStoreId], references: [id])
  Warehouse_Transfer_sourceWarehouseIdToWarehouse      Warehouse?     @relation("Transfer_sourceWarehouseIdToWarehouse", fields: [sourceWarehouseId], references: [id])
  items                                                TransferItem[]

  @@index([referenceNumber])
}

model TransferItem {
  id                                                               String         @id @default(cuid())
  transferId                                                       String
  productId                                                        String
  sourceInventoryId                                                String?
  destinationInventoryId                                           String?
  requestedQuantity                                                Int
  approvedQuantity                                                 Int?
  shippedQuantity                                                  Int?
  receivedQuantity                                                 Int?
  sourceCostPrice                                                  Decimal        @db.Decimal(10, 2)
  sourceWholesalePrice                                             Decimal        @db.Decimal(10, 2)
  sourceRetailPrice                                                Decimal        @db.Decimal(10, 2)
  destinationCostPrice                                             Decimal        @db.Decimal(10, 2)
  destinationWholesalePrice                                        Decimal        @db.Decimal(10, 2)
  destinationRetailPrice                                           Decimal        @db.Decimal(10, 2)
  notes                                                            String?
  createdAt                                                        DateTime       @default(now())
  updatedAt                                                        DateTime       @updatedAt
  InventoryItem_TransferItem_destinationInventoryIdToInventoryItem InventoryItem? @relation("TransferItem_destinationInventoryIdToInventoryItem", fields: [destinationInventoryId], references: [id])
  product                                                          Product        @relation(fields: [productId], references: [id])
  InventoryItem_TransferItem_sourceInventoryIdToInventoryItem      InventoryItem? @relation("TransferItem_sourceInventoryIdToInventoryItem", fields: [sourceInventoryId], references: [id])
  transfer                                                         Transfer       @relation(fields: [transferId], references: [id])
}

model Customer {
  id                  String                @id @default(cuid())
  name                String
  email               String?               @unique
  phone               String?
  address             String?
  birthDate           DateTime?
  gender              String?
  loyaltyPoints       Int                   @default(0)
  loyaltyTier         LoyaltyTier           @default(STANDARD)
  notes               String?
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  customerAddresses   CustomerAddress[]
  CustomerNote        CustomerNote[]
  CustomerToGroup     CustomerToGroup[]
  loyaltyTransactions LoyaltyTransaction[]
  PromotionRedemption PromotionRedemption[]
  sales               Sale[]
}

model CustomerAddress {
  id           String   @id @default(cuid())
  customerId   String
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  addressType  String   @default("SHIPPING")
  isDefault    Boolean  @default(false)
  addressLine1 String
  addressLine2 String?
  city         String
  state        String?
  postalCode   String
  country      String
  phone        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model LoyaltyProgram {
  id                 String               @id @default(cuid())
  name               String
  description        String?
  pointsPerCurrency  Decimal              @default(1) @db.Decimal(10, 2)
  minimumPurchase    Decimal?             @db.Decimal(10, 2)
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  CustomerPromotion  CustomerPromotion[]
  LoyaltyProgramRule LoyaltyProgramRule[]
  tiers              LoyaltyProgramTier[]
  transactions       LoyaltyTransaction[]
}

model LoyaltyProgramTier {
  id               String         @id @default(cuid())
  programId        String
  name             String
  description      String?
  requiredPoints   Int
  pointsMultiplier Decimal        @default(1) @db.Decimal(5, 2)
  benefits         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  program          LoyaltyProgram @relation(fields: [programId], references: [id])
}

model LoyaltyTransaction {
  id          String                 @id @default(cuid())
  customerId  String
  customer    Customer               @relation(fields: [customerId], references: [id])
  programId   String
  program     LoyaltyProgram         @relation(fields: [programId], references: [id])
  points      Int
  type        LoyaltyTransactionType
  description String?
  referenceId String? // Changed from saleId to referenceId if needed
  Sale        Sale?                  @relation(fields: [referenceId], references: [id])
  expiryDate  DateTime?
  createdAt   DateTime               @default(now())
}

model Audit {
  id              String            @id @default(cuid())
  referenceNumber String            @unique
  warehouseId     String
  status          AuditStatus       @default(PLANNED)
  startDate       DateTime
  endDate         DateTime?
  notes           String?
  createdById     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       User              @relation("AuditCreatedBy", fields: [createdById], references: [id])
  warehouse       Warehouse         @relation(fields: [warehouseId], references: [id])
  assignments     AuditAssignment[]
  items           AuditItem[]
}

model AuditItem {
  id               String          @id @default(cuid())
  auditId          String
  productId        String
  inventoryItemId  String
  expectedQuantity Int
  actualQuantity   Int?
  variance         Int?
  notes            String?
  status           AuditItemStatus @default(PENDING)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  audit            Audit           @relation(fields: [auditId], references: [id])
  inventoryItem    InventoryItem   @relation(fields: [inventoryItemId], references: [id])
  product          Product         @relation(fields: [productId], references: [id])
}

model AuditAssignment {
  id              String   @id @default(cuid())
  auditId         String
  userId          String
  assignedZones   String?
  assignedAisles  String?
  assignedShelves String?
  assignedBins    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  audit           Audit    @relation(fields: [auditId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model CustomerGroup {
  id              String            @id
  name            String
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  CustomerToGroup CustomerToGroup[]
}

model CustomerNote {
  id          String   @id @default(cuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  note        String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CustomerPromotion {
  id                   String                @id
  name                 String
  description          String?
  type                 PromotionType
  discountValue        Decimal               @db.Decimal(10, 2)
  isPercentage         Boolean               @default(false)
  code                 String?
  minimumPurchase      Decimal?              @db.Decimal(10, 2)
  programId            String?
  requiredLoyaltyTier  LoyaltyTier?
  startDate            DateTime
  endDate              DateTime
  isActive             Boolean               @default(true)
  usageLimit           Int?
  usageCount           Int                   @default(0)
  applicableProducts   String?
  applicableCategories String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  LoyaltyProgram       LoyaltyProgram?       @relation(fields: [programId], references: [id])
  PromotionRedemption  PromotionRedemption[]
}

model CustomerToGroup {
  customerId    String
  groupId       String
  createdAt     DateTime      @default(now())
  Customer      Customer      @relation(fields: [customerId], references: [id])
  CustomerGroup CustomerGroup @relation(fields: [groupId], references: [id])

  @@id([customerId, groupId])
}

model LoyaltyProgramRule {
  id             String          @id
  programId      String
  name           String
  description    String?
  type           LoyaltyRuleType
  conditions     String?
  pointsAwarded  Int
  isActive       Boolean         @default(true)
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  LoyaltyProgram LoyaltyProgram  @relation(fields: [programId], references: [id])
}

model Notification {
  id                String           @id
  userId            String
  type              NotificationType
  title             String
  message           String
  isRead            Boolean          @default(false)
  relatedEntityId   String?
  relatedEntityType String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  receiver          User             @relation("UserReceivedNotifications", fields: [userId], references: [id])
  sender            User?            @relation("UserSentNotifications", fields: [senderId], references: [id])
  senderId          String?
}

model PromotionRedemption {
  id                String            @id
  promotionId       String
  customerId        String
  saleId            String
  discountAmount    Decimal           @db.Decimal(10, 2)
  createdAt         DateTime          @default(now())
  Customer          Customer          @relation(fields: [customerId], references: [id])
  CustomerPromotion CustomerPromotion @relation(fields: [promotionId], references: [id])
  Sale              Sale              @relation(fields: [saleId], references: [id])
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  WAREHOUSE_MANAGER
  WAREHOUSE_STAFF
  STORE_MANAGER
  STORE_STAFF
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWAL_PENDING
}

enum PerformanceMetricType {
  ON_TIME_DELIVERY
  QUALITY
  PRICE_COMPETITIVENESS
  RESPONSIVENESS
  LEAD_TIME
}

enum PurchaseOrderStatus {
  DRAFT
  SUBMITTED
  APPROVED
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum InventoryStatus {
  AVAILABLE
  RESERVED
  DAMAGED
  EXPIRED
  IN_TRANSIT
  QUARANTINE
  RETURNED
  OUT_OF_STOCK
}

enum InventoryMethod {
  FIFO
  LIFO
  FEFO
  AVERAGE_COST
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  LOYALTY_POINTS
  GIFT_CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  FAILED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum RefundMethod {
  ORIGINAL_PAYMENT
  STORE_CREDIT
  CASH
  BANK_TRANSFER
}

enum RefundStatus {
  PENDING
  PROCESSED
  REJECTED
}

enum ReturnReason {
  DEFECTIVE
  DAMAGED
  WRONG_ITEM
  NOT_AS_DESCRIBED
  CHANGED_MIND
  OTHER
}

enum ItemCondition {
  GOOD
  DAMAGED
  OPENED
  USED
}

enum QCType {
  RECEIVING
  RETURN
  RANDOM
  COMPLAINT
}

enum QCStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QCItemStatus {
  PENDING
  PASSED
  FAILED
  PARTIALLY_PASSED
}

enum QCAction {
  ACCEPT
  REJECT
  REWORK
  RETURN_TO_SUPPLIER
  DISPOSE
}

enum TransferType {
  WAREHOUSE_TO_WAREHOUSE
  WAREHOUSE_TO_STORE
  STORE_TO_WAREHOUSE
  STORE_TO_STORE
}

enum TransferPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TransferStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  IN_TRANSIT
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum LoyaltyTransactionType {
  EARN
  REDEEM
  ADJUSTMENT
  EXPIRY
}

enum LoyaltyTier {
  STANDARD
  SILVER
  GOLD
  PLATINUM
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  TRANSFER
  ADJUSTMENT
  SALE
  RETURN
  APPROVAL
  REJECTION
}

enum AuditStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AuditItemStatus {
  PENDING
  COUNTED
  RECONCILED
  DISCREPANCY
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProductCondition {
  NEW
  DAMAGED
}

enum LoyaltyRuleType {
  PURCHASE
  FIRST_PURCHASE
  BIRTHDAY
  REFERRAL
  PRODUCT_CATEGORY
  SPECIFIC_PRODUCT
  PURCHASE_FREQUENCY
  CUSTOM
}

enum NotificationType {
  TRANSFER_REQUEST
  TRANSFER_APPROVAL
  TRANSFER_REJECTION
  TRANSFER_RECEIVED
  LOW_STOCK
  STOCK_EXPIRING
  AUDIT_ASSIGNED
  AUDIT_COMPLETED
  PURCHASE_ORDER
  SYSTEM
  LOYALTY_POINTS_EARNED
  LOYALTY_POINTS_REDEEMED
  LOYALTY_TIER_CHANGED
  PROMOTION_AVAILABLE
}

enum PromotionType {
  DISCOUNT_AMOUNT
  DISCOUNT_PERCENTAGE
  FREE_SHIPPING
  BUY_X_GET_Y
  BUNDLE_DISCOUNT
  LOYALTY_POINTS_MULTIPLIER
}
